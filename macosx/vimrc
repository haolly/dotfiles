set nocompatible               " Be iMproved
"******************vim-plug start**************************************
call plug#begin('~/.vim/plugged')
"vim-snippets depends on ultisnips
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"useless in terminal vim with dark background
" 'nathanaelkane/vim-indent-guides'
"Do not use this
" 'Raimondi/delimitMate'
Plug 'jiangmiao/auto-pairs'
Plug 'majutsushi/tagbar'
Plug 'terryma/vim-multiple-cursors'
Plug 'easymotion/vim-easymotion'
Plug 'tomasr/molokai'
"Plug 'Valloric/YouCompleteMe'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-surround'
"for input method
"Plug 'CodeFalling/fcitx-vim-osx'
"Plug 'ybian/smartim'
Plug 'mileszs/ack.vim'

call plug#end()
"******************vim-plug end **************************************

" Plugin vim-airline setting -----------------------{{{
let g:airline_theme = 'powerlineish'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tagbar#enabled = 1
" }}}

nmap <F9> :TagbarToggle<CR>
let g:tagbar_autofocus = 1



let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf.py"

set runtimepath^=~/.vim/plugged/ctrlp.vim




"" Basic setting {{{
"group help those autocmd don't source again, see h:autocmd-groups
augroup myautocmd
	autocmd!
"set imdisable
" back to english input when you switch to normal mod
"autocmd InsertEnter * set noimdisable
"autocmd InsertLeave * set imdisable
augroup end

"" allow plugins by file type
filetype on
filetype plugin on
filetype indent on
"" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

colorscheme molokai
set laststatus=2

"" Fix backspace indent
set backspace=indent,eol,start

"Press space to clear search highlighting and any message already displayed.
nnoremap <silent> <Space> :silent noh<Bar>echo<CR>


"" Tabs. May be overriten by autocmd rules
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set shiftround
set display=lastline


" No annoying sound on errors
set noerrorbells
set novisualbell
set visualbell t_vb=

"" Map leader to ,
let mapleader=','

"" Enable hidden buffers
set hidden

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

set ttyfast
set lazyredraw

" Split new panel in right and below
set splitbelow
set splitright

"" Encoding
set bomb
set binary

set list                   " Show non-printable characters.
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif


"" Directories for swp files
set nobackup
set noswapfile

set fileformats=unix,dos,mac
set showcmd
set showmode

"命令行模式快捷鍵， ctrl-a/e 跳轉到行首行尾
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" }}}

"" Visual Settigns
syntax on
set ruler
set number

let no_buffers_menu=1
highlight BadWhitespace ctermbg=red guibg=red

set mousemodel=popup
set t_Co=256
set nocursorline
set guioptions=egmrt
"set gfn=Monospace\ 8

if has("gui_running")
  if has("gui_mac") || has("gui_macvim")
    set guifont=Menlo:h14
    set transparency=7
  endif
else
  let g:CSApprox_loaded = 1

  if $COLORTERM == 'gnome-terminal'
    set term=gnome-256color
  else
    if $TERM == 'xterm'
      set term=xterm-256color
    endif
  endif
endif

if &term =~ '256color'
  set t_ut=
endif

"" Disable the blinking cursor.
set gcr=a:blinkon0
set scrolloff=3


"" Use modeline overrides
set modeline
set modelines=10

set title
set titleold="Terminal"
set titlestring=%F


"" no one is really happy until you have this shortcuts
cab W! w!
cab Q! q!
cab Wq wq
cab Wa wa
cab wQ wq
cab WQ wq
cab W w
cab Q q

" markdown
let g:vim_markdown_folding_disabled = 1

"" NERDTree configuration {{{
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 20
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
nnoremap <silent> <F2> :NERDTreeFind<CR>
noremap <F3> :NERDTreeToggle<CR>
" }}}

"" Functions -----------------------{{{
function s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=79
endfunction

function TrimWhiteSpace()
  let @*=line(".")
  %s/\s*$//e
  ''
:endfunction
" }}}
"" Autocmd Rules --------------------------------{{{
"" The PC is fast enough, do syntax highlight syncing from start, Oh, shit!
"autocmd BufEnter * :syntax sync fromstart

"" Remember cursor position
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

"" txt
autocmd BufRead,BufNewFile *.txt call s:setupWrapping()

"" make/cmake
autocmd FileType make set noexpandtab
autocmd BufNewFile,BufRead CMakeLists.txt setlocal ft=cmake

if has("gui_running")
  autocmd BufWritePre * :call TrimWhiteSpace()
endif

set autoread

" }}}

"" Mappings ---------------------------{{{
"" Split
noremap <Leader>h :split<CR>
noremap <Leader>v :vsplit<CR>

"" Git
noremap <Leader>ga :!git add .<CR>
noremap <Leader>gc :!git commit -m '<C-R>="'"<CR>
noremap <Leader>gsh :!git push<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>

"" Tabs
nmap <Tab> gt
nmap <S-Tab> gT
nnoremap <silent> <S-t> :tabnew<CR>

"" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

"" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

"" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

"" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

"" Remove trailing whitespace on <leader>S
nnoremap <leader>:call TrimWhiteSpace()<cr>:let @/=''<CR>
inoremap jk <esc>
inoremap <esc> <nop>
" ctrl+u Upper the world!!
nnoremap <leader>u viwU
nnoremap <leader>cv :tabnew $MYVIMRC<cr>
"comment
autocmd FileType c nnoremap <buffer> <maplocalleader>c I//<esc>
" }}}

"" ctrlp.vim settings -------------------------{{{
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,.pyc,__pycache__,*/tmp/*,*.so,*.swp,*.zip
"windows
"set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.dll
let g:ctrlp_custom_ignore = {
			\ 'dir': '\v[\/]\.(git|hg|svn|tox)$',
			\ 'file': '\v\.(exe|so|dll|zip|jpeg|png|gif|jpg|class)',
			\}
let g:ctrlp_user_command = 'find %s -type f'
"windows
"let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'
let g:ctrlp_use_caching = 0
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
noremap <leader>b :CtrlPBuffer<CR>
let g:ctrlp_map = ',e'
let g:ctrlp_open_new_file = 'r'
" }}}

" syntastic plugin setting goes here ----------------{{{
let g:syntastic_always_populate_loc_list=1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'
let g:syntastic_auto_loc_list=1
let g:syntastic_aggregate_errors = 1
" }}}


"" Copy/Paste/Cut --------------------{{{
noremap YY "+y<CR>
noremap P "+gP<CR>
noremap XX "+x<CR>
" pbcopy for OSX copy/paste
vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>
" }}}



"" Open current line on GitHub
"" noremap ,o :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs open<CR><CR>
"" Custom configs


" syntastic
"let g:syntastic_python_checkers=['python', 'flake8']



let maplocalleader = "\\"

"abbreviations -----------------------{{{
iabbrev @@ andyhaolly@gmail.com
" }}}

" Virscript file settings ------------{{{
augroup filetype_vim
	autocmd!
	autocmd FileType vim setlocal foldmethod=marker
augroup end
" }}}

" when paste the text that's already indented, you need this!
set pastetoggle=<F4>
