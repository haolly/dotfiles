set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction


""""""""""""""""Plugin Start""""""""""""""""""""""""""""""""""""""{{{
"从下面这个地址下载vim，不要从官网下载！！！
"https://tuxproject.de/projects/vim/
"need install git for windows first!
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

Plug 'ctrlpvim/ctrlp.vim'
Plug 'Shougo/neocomplete.vim'
Plug 'sickill/vim-monokai'
Plug 'tomasr/molokai'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdtree'
Plug 'jiangmiao/auto-pairs'
Plug 'vim-syntastic/syntastic'

"Plug 'Yggdroot/indentLine'
"Plug 'nathanaelkane/vim-indent-guides'

" Add plugins to &runtimepath
call plug#end()

"Usage PlugInstall/Update/Clean/Upgrade/Status/Snapshot
""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

"""""""""""""""""""""""""""""
"解决windows下的中文乱码问题
"""""""""""""""""""""""""""""
let mapleader = ','
set encoding=utf-8
"set termencoding=utf-8
set fileencodings=ucs-bom,utf-8,chinese,latin-1
set fileencoding=utf-8
" do not use this condition
"if has("win32")
"set fileencoding=chinese
"else
"set fileencoding=utf-8
"endif
"解决中文菜单乱码
set langmenu=zh_CN.utf-8
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
"解决console输出乱码
language messages zh_cn.utf-8
""""""""""""""""""""""""""""""""""""""""""""""""
set nu
set guifont=Monaco:h12:cANSI
"colorscheme torte
"colorscheme desert
colorscheme molokai
"let the tabstop equal 4
set tabstop=4
"high light the search
set hlsearch
"set the c language indent format 
set cindent
"set the indent width, >> indents by 4 space
set shiftwidth=4
" >> indents to next multiple of 'shiftwidth'
set shiftround
"使得按退格键时可以一次删掉 4 个空格
set softtabstop=4
"用空格键替换制表符 
"set expandtab 
"syntax high light
syntax on
"很多插件都会要求的配置检测文件类型 
filetype on 
filetype plugin on 
filetype indent on
" Sets how many lines of history VIM has to remember
set history=700
" Ignore case when searching
" set ignorecase
set smartcase
" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile
set noundofile
" Be smart when using tabs ;)
set smarttab
"share the clipboard with windows
set clipboard=unnamed
"突出显示当前行
set cursorline
"自动切换当前目录为当前文件所在的目录
set autochdir 
set backspace=indent,eol,start
" switch between buffers without having to save first
set hidden
" always show statusline
set laststatus=2
" show as much as possible of the last line
set display=lastline


" Open new split panes to right and bottom, which feels more natural
" command sp and vsp
set splitbelow
set splitright

"Show current mode in command-line
set showmode
set showcmd

set ttyfast
set lazyredraw
set wrapscan

set list                   " Show non-printable characters.
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

if has('win32')
    set imdisable
    set imactivatekey=D-space
    set imsearch=0
    autocmd InsertLeave * set imdisable
    autocmd InsertEnter * set noimdisable
endif

if has("gui_running")
  " GUI is running or is about to start.
  " Maximize gvim window (for an alternative on Windows, see simalt below).
  set lines=999 columns=999
else
  " This is console Vim.
  if exists("+lines")
    set lines=50
  endif
  if exists("+columns")
    set columns=100
  endif
endif

"-------------------------neocomplete-------------- {{{
"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
" }}}


" =====================vim-syntastic ============={{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" }}}

"===================vim-airline=============================={{{
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#fnamemod = ':t'
" }}}

"========================ack.vim ==============================={{{
"Need install ag or ack first!
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
" }}}


"============================CtrlP.vim ==================={{{
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
"if g:ctrlp_user_command is used, the ignore will not work!!!
"let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'  " Windows
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
    " error on windows
    "let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
    "let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'  " Windows
endif

set wildmode=list:longest,list:full
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|tox)$'
let g:ctrlp_use_caching = 0
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
noremap <leader>b :CtrlPBuffer<CR>
let g:ctrlp_map = ',e'
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_root_markers = ['.idea']
" }}}


"=======================map is defined here ================={{{
"down to the "visual" line below
nnoremap j gj
nnoremap k gk

"navigate throw windows quickly
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

nmap <silent> <leader>/ :nohl<CR>

nmap <Tab> gt
nmap <S-Tab> gT
nnoremap <silent> <S-t> :tabnew<CR>

noremap YY "+y<CR>
noremap P "+gP<CR>
noremap XX "+x<CR>

"move line down/up
nnoremap <S-Up> :m-2<CR>
nnoremap <S-Down> :m+<CR>
inoremap <S-Up> <Esc>:m-2<CR>
inoremap <S-Down> <Esc>:m+<CR>

" command map
:command WQ wq
:command Wq wq
:command W w
:command Q q

"Avoid the escape key
inoremap jk <ESC>

"}}}

" F(N) 功能键绑定 {{{
" indent right when you paste external text to vim
set pastetoggle=<F2>
"=========nerdtree
nmap <F3> :NERDTreeToggle<CR>
" }}}

" Virscript file settings ------------{{{
augroup filetype_vim
	autocmd!
	autocmd FileType vim setlocal foldmethod=marker
augroup end
" }}}


"-----------------------------常用的命令备注 {{{
" set fileencoding=utf-8
" vip/vap 选择一个段落
" vip= 对齐一个段落
" See :help v_ip (vip = visual inner paragraph).
" In general, use :help v_<whatever> for help on <whatever> in visual mode.
" Or :help c_<whatever> for the command line, or :help i_<whatever> for insert mode.
" vimgrep /\<search text\>/ path/to/folder/**/* | cw
" (cw to open the search list in window)
" == fold
" za toggle current fold open/close
" zc close current fold
" zR open all fold
" == select a block
" vi{/va{
" "jump to beginning of C code block ,ie, symbol '{'
" [{
" jump to end of C code block, ie, symbol '}'
" ]}
" [[ or ]] backword to '{' or forward to '}'
" <c-o> / <c-i> navigate jumplist
" Navigate the folded document
" zj/ zk move down or up to next fold
"============= }}}
